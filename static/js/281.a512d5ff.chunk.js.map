{"version":3,"file":"static/js/281.a512d5ff.chunk.js","mappings":"6TAeaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiB,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACP,EAEA,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAOC,UAC3DN,EAAAA,EAAAA,KAACO,EAAAA,GAAG,CAACL,GAAG,QAAQM,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAGJ,UACvCN,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CACLC,cAAe,CACblB,KAAM,GACNG,MAAO,GACPC,SAAU,IACVQ,SAED,SAAAO,GAAeA,EAAZC,aAAH,IAAiBC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC/BhB,EAAAA,EAAAA,KAAA,QAAMiB,SAAU7B,EAAekB,UAC7BY,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,QAAS,EAAGjB,MAAM,aAAYG,SAAA,EACpCY,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAf,SAAA,EACVY,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAf,SAAA,EACVN,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACC,QAAQ,OAAMjB,SAAC,eAC1BN,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,OACHjC,KAAK,OACLkC,KAAK,OACLC,QAAQ,eAGZ7B,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACC,QAAQ,QAAOjB,SAAC,mBAC3BN,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,QACHjC,KAAK,QACLkC,KAAK,QACLC,QAAQ,eAGZX,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAACS,YAAaf,EAAOjB,UAAYkB,EAAQlB,SAASQ,SAAA,EAC5DN,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACC,QAAQ,WAAUjB,SAAC,cAC9BN,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,WACHjC,KAAK,WACLkC,KAAK,WACLC,QAAQ,SACRE,SAAU,SAAAnC,GACR,IAAIoC,EAMJ,OAJIpC,EAAMqC,OAAS,IACjBD,EAAQ,+CAGHA,CACT,KAEFhC,EAAAA,EAAAA,KAACkC,EAAAA,GAAgB,CAAA5B,SAAES,EAAOjB,eAE5BE,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CAACP,KAAK,SAASQ,YAAY,SAASC,MAAM,OAAM/B,SAAC,iBAIrD,OAMnB,EC3Fe,SAASgC,IACtB,OACEpB,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACEN,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CAAAjC,UACLN,EAAAA,EAAAA,KAAA,SAAAM,SAAO,oBAETN,EAAAA,EAAAA,KAACf,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.js","pages/RegisterPage.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={onHandleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormControl>\n                    <FormLabel htmlFor=\"name\">User name</FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      variant=\"filled\"\n                    />\n                  </FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'Password must contain at least 6 characters';\n                      }\n\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Register\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","onHandleSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","_jsx","Flex","bg","align","justify","h","children","Box","p","rounded","w","Formik","initialValues","_ref","handleSubmit","errors","touched","onSubmit","_jsxs","VStack","spacing","FormControl","FormLabel","htmlFor","Field","as","Input","id","type","variant","isInvalid","validate","error","length","FormErrorMessage","Button","colorScheme","width","Register","Helmet"],"sourceRoot":""}