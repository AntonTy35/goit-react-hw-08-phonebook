{"version":3,"file":"static/js/482.ba69be62.chunk.js","mappings":"6TAeaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiB,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACP,EAEA,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAOC,UAC3DN,EAAAA,EAAAA,KAACO,EAAAA,GAAG,CAACL,GAAG,QAAQM,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAGJ,UACvCN,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CACLC,cAAe,CACbjB,MAAO,GACPG,SAAU,IACVQ,SAED,SAAAO,GAAeA,EAAZC,aAAH,IAAiBC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC/BhB,EAAAA,EAAAA,KAAA,QAAMiB,SAAU5B,EAAeiB,UAC7BY,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,QAAS,EAAGjB,MAAM,aAAYG,SAAA,EACpCY,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAf,SAAA,EACVN,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACC,QAAQ,QAAOjB,SAAC,mBAC3BN,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,eAGZZ,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAACU,YAAahB,EAAOjB,UAAYkB,EAAQlB,SAASQ,SAAA,EAC5DN,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CAACC,QAAQ,WAAUjB,SAAC,cAC9BN,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAIC,EAAAA,EACJC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRE,SAAU,SAAAnC,GACR,IAAIoC,EAKJ,OAHIpC,EAAMqC,OAAS,IACjBD,EAAQ,+CAEHA,CACT,KAEFjC,EAAAA,EAAAA,KAACmC,EAAAA,GAAgB,CAAA7B,SAAES,EAAOjB,eAE5BE,EAAAA,EAAAA,KAACoC,EAAAA,EAAM,CAACP,KAAK,SAASQ,YAAY,SAASC,MAAM,OAAMhC,SAAC,cAIrD,OAMnB,EC9Ee,SAASiC,IACtB,OACErB,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACEN,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CAAAlC,UACLN,EAAAA,EAAAA,KAAA,SAAAM,SAAO,aAETN,EAAAA,EAAAA,KAACd,EAAS,MAGhB,C,yKCEAuD,GAAsDC,EAAAA,EAAAA,GAEpD,CACAd,KAAA,yBACAe,aAAA,8GACDC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GALMK,EAAAF,EAAA,GAAyBG,EAAkBH,EAAA,GAgBrCT,GAAmBa,EAAAA,EAAAA,IAC9B,SAACC,EAAOC,GACN,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,YAAaH,GAC1CI,GAAWC,EAAAA,EAAAA,IAAiBL,GAC5BM,GAAQC,EAAAA,EAAAA,MAEd,OAAK,MAAAD,OAAA,EAAAA,EAAOxB,YAGV0B,EAAAA,EAAAA,KAACX,EAAA,CAAwBjD,MAAOsD,EAC9B7C,UAAAmD,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF,MAAAJ,OAAA,EAAAA,EAAOK,qBAAqBP,EAAUH,IAAA,IAC1CW,WAAWC,EAAAA,EAAAA,IAAG,6BAA8Bb,EAAMY,WAClDE,OAAAJ,EAAAA,EAAAA,GAAA,CACEK,QAAS,OACTC,WAAY,UACTd,EAAOe,WAVY,IAehC,IAGF/B,EAAiBgC,YAAc,oBAMFnB,EAAAA,EAAAA,IAA6B,SAACC,EAAOC,GAChE,IAAMC,EAASJ,IACTQ,GAAQC,EAAAA,EAAAA,MAEd,KAAK,MAAAD,OAAA,EAAAA,EAAOxB,WAAW,OAAO,KAE9B,IAAMqC,GAAaN,EAAAA,EAAAA,IAAG,0BAA2Bb,EAAMY,WAEvD,OACEJ,EAAAA,EAAAA,KAACY,EAAAA,GAAAV,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACCT,IAAAA,EACA,eAAW,GACPD,GAAA,IACJc,MAAOZ,EAAOmB,KACdT,UAAWO,EAEX9D,UAAAmD,EAAAA,EAAAA,KAAC,QACCc,KAAK,eACLC,EAAE,8VAIV,IAEcL,YAAc,e,6KCtBflE,GAAO+C,EAAAA,EAAAA,IAA6B,SAAcC,EAAOC,GACpE,IAAQuB,EACNxB,EADMwB,UAAWtE,EACjB8C,EADiB9C,MAAOC,EACxB6C,EADwB7C,QAASsE,EACjCzB,EADiCyB,KAAMC,EACvC1B,EADuC0B,MAAOC,EAC9C3B,EAD8C2B,KAAMC,EACpD5B,EADoD4B,OAAWC,GAAAC,EAAAA,EAAAA,GAC/D9B,EAAA+B,GAEI7B,EAAS,CACba,QAAS,OACTiB,cAAeR,EACfR,WAAY9D,EACZ+E,eAAgB9E,EAChB+E,SAAUT,EACVU,UAAWT,EACXU,SAAUT,EACVU,WAAYT,GAGd,OAAOpB,EAAAA,EAAAA,KAACC,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,GAAA,CAAIT,IAAAA,EAAUa,MAAOZ,GAAY2B,GAClD,IAEA7E,EAAKkE,YAAc,M","sources":["components/LoginForm/LoginForm.js","pages/LoginPage.js","../node_modules/@chakra-ui/form-control/src/form-error.tsx","../node_modules/@chakra-ui/layout/src/flex.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={onHandleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'Password must contain at least 6 characters';\n                      }\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n","import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n"],"names":["LoginForm","dispatch","useDispatch","onHandleSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","_jsx","Flex","bg","align","justify","h","children","Box","p","rounded","w","Formik","initialValues","_ref","handleSubmit","errors","touched","onSubmit","_jsxs","VStack","spacing","FormControl","FormLabel","htmlFor","Field","as","Input","id","name","type","variant","isInvalid","validate","error","length","FormErrorMessage","Button","colorScheme","width","Login","Helmet","_createContext","createContext","errorMessage","_createContext2","_slicedToArray","FormErrorStylesProvider","useFormErrorStyles","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","jsx","chakra","_objectSpread","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d","direction","wrap","basis","grow","shrink","rest","_objectWithoutProperties","_excluded","flexDirection","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink"],"sourceRoot":""}